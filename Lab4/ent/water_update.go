// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"minimal/ent/predicate"
	"minimal/ent/water"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WaterUpdate is the builder for updating Water entities.
type WaterUpdate struct {
	config
	hooks    []Hook
	mutation *WaterMutation
}

// Where appends a list predicates to the WaterUpdate builder.
func (wu *WaterUpdate) Where(ps ...predicate.Water) *WaterUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetLiters sets the "liters" field.
func (wu *WaterUpdate) SetLiters(f float64) *WaterUpdate {
	wu.mutation.ResetLiters()
	wu.mutation.SetLiters(f)
	return wu
}

// AddLiters adds f to the "liters" field.
func (wu *WaterUpdate) AddLiters(f float64) *WaterUpdate {
	wu.mutation.AddLiters(f)
	return wu
}

// SetTopic sets the "topic" field.
func (wu *WaterUpdate) SetTopic(s string) *WaterUpdate {
	wu.mutation.SetTopic(s)
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WaterUpdate) SetCreatedAt(t time.Time) *WaterUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WaterUpdate) SetNillableCreatedAt(t *time.Time) *WaterUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// Mutation returns the WaterMutation object of the builder.
func (wu *WaterUpdate) Mutation() *WaterMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WaterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WaterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			if wu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WaterUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WaterUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WaterUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WaterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   water.Table,
			Columns: water.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: water.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Liters(); ok {
		_spec.SetField(water.FieldLiters, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedLiters(); ok {
		_spec.AddField(water.FieldLiters, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Topic(); ok {
		_spec.SetField(water.FieldTopic, field.TypeString, value)
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(water.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{water.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// WaterUpdateOne is the builder for updating a single Water entity.
type WaterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WaterMutation
}

// SetLiters sets the "liters" field.
func (wuo *WaterUpdateOne) SetLiters(f float64) *WaterUpdateOne {
	wuo.mutation.ResetLiters()
	wuo.mutation.SetLiters(f)
	return wuo
}

// AddLiters adds f to the "liters" field.
func (wuo *WaterUpdateOne) AddLiters(f float64) *WaterUpdateOne {
	wuo.mutation.AddLiters(f)
	return wuo
}

// SetTopic sets the "topic" field.
func (wuo *WaterUpdateOne) SetTopic(s string) *WaterUpdateOne {
	wuo.mutation.SetTopic(s)
	return wuo
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WaterUpdateOne) SetCreatedAt(t time.Time) *WaterUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WaterUpdateOne) SetNillableCreatedAt(t *time.Time) *WaterUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// Mutation returns the WaterMutation object of the builder.
func (wuo *WaterUpdateOne) Mutation() *WaterMutation {
	return wuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WaterUpdateOne) Select(field string, fields ...string) *WaterUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Water entity.
func (wuo *WaterUpdateOne) Save(ctx context.Context) (*Water, error) {
	var (
		err  error
		node *Water
	)
	if len(wuo.hooks) == 0 {
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WaterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			if wuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Water)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WaterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WaterUpdateOne) SaveX(ctx context.Context) *Water {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WaterUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WaterUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WaterUpdateOne) sqlSave(ctx context.Context) (_node *Water, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   water.Table,
			Columns: water.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: water.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Water.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, water.FieldID)
		for _, f := range fields {
			if !water.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != water.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Liters(); ok {
		_spec.SetField(water.FieldLiters, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedLiters(); ok {
		_spec.AddField(water.FieldLiters, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Topic(); ok {
		_spec.SetField(water.FieldTopic, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(water.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Water{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{water.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
