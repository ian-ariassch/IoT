// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"minimal/ent/water"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Water is the model entity for the Water schema.
type Water struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Liters holds the value of the "liters" field.
	Liters float64 `json:"liters,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Water) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case water.FieldLiters:
			values[i] = new(sql.NullFloat64)
		case water.FieldID:
			values[i] = new(sql.NullInt64)
		case water.FieldTopic:
			values[i] = new(sql.NullString)
		case water.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Water", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Water fields.
func (w *Water) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case water.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case water.FieldLiters:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field liters", values[i])
			} else if value.Valid {
				w.Liters = value.Float64
			}
		case water.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				w.Topic = value.String
			}
		case water.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Water.
// Note that you need to call Water.Unwrap() before calling this method if this Water
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Water) Update() *WaterUpdateOne {
	return (&WaterClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Water entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Water) Unwrap() *Water {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Water is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Water) String() string {
	var builder strings.Builder
	builder.WriteString("Water(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("liters=")
	builder.WriteString(fmt.Sprintf("%v", w.Liters))
	builder.WriteString(", ")
	builder.WriteString("topic=")
	builder.WriteString(w.Topic)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Waters is a parsable slice of Water.
type Waters []*Water

func (w Waters) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
